# Generated by Django 2.0.2 on 2018-05-03 00:21

from django.conf import settings
from django.db import migrations, models
import django_markdown.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('main_app', '0001_initial'),
        ('main_app', '0002_contact'),
        ('main_app', '0003_profil_points'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', django_markdown.models.MarkdownField()),
                ('votes', models.IntegerField(default=0)),
                ('pub_date', models.DateTimeField(verbose_name='date published')),
            ],
        ),
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_categorie', models.CharField(max_length=100)),
                ('description_categorie', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_text', models.CharField(max_length=200)),
                ('pub_date', models.DateTimeField(verbose_name='date published')),
                ('answer', models.ForeignKey(on_delete=True, to='qa.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='Profil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('website', models.URLField(blank=True)),
                ('picture', models.ImageField(blank=True, upload_to='qa/static/profile_images')),
                ('date_naissance', models.DateField()),
                ('facebook', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('youtube', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('instagram', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('linkedin', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('tel', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('ville', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('pays', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('fonction', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('service', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('user', models.OneToOneField(on_delete=True, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_title', models.CharField(max_length=200)),
                ('question_text', django_markdown.models.MarkdownField()),
                ('pub_date', models.DateTimeField(verbose_name='date published')),
                ('reward', models.IntegerField(default=0)),
                ('views', models.IntegerField(default=0)),
                ('closed', models.BooleanField(default=False)),
                ('categorie', models.ForeignKey(on_delete=True, to='qa.Categorie')),
            ],
        ),
        migrations.CreateModel(
            name='QVoter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.ForeignKey(on_delete=True, to='qa.Question')),
                ('user', models.ForeignKey(on_delete=True, to='qa.Profil')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.ForeignKey(on_delete=True, to='qa.Answer')),
                ('user', models.ForeignKey(on_delete=True, to='qa.Profil')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='tags',
            field=models.ManyToManyField(to='qa.Tag'),
        ),
        migrations.AddField(
            model_name='question',
            name='user_data',
            field=models.ForeignKey(on_delete=True, to='qa.Profil'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user_data',
            field=models.ForeignKey(on_delete=True, to='qa.Profil'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=True, to='qa.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user_data',
            field=models.ForeignKey(on_delete=True, to='qa.Profil'),
        ),
    ]
